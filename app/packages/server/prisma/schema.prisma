// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Logs {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  timestamp DateTime @default(now()) @db.Timestamp(0)
  level     String   @db.Text
  message   String   @db.Text
  meta      Json?
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.Text
  expiresAt   DateTime
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  username String  @unique
  firstName String
  lastName String
  password String
  admin Boolean @default(false)
  workspaces WorkspaceUser[]
  cardSets CardSetUser[]
}

enum UserRole {
  OWNER
  ADMINISTRATOR
  CONTRIBUTOR
  USER
}

model WorkspaceUser {
  workspace Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId Int
  user    User     @relation(fields: [userId], references: [id])
  userId  Int
  role    UserRole

  @@id([workspaceId, userId])
}

model Workspace {
  id      Int      @id @default(autoincrement())
  name    String
  description String
  users   WorkspaceUser[]
  cardSets CardSet[]
  medias  Media[]
  allowGuests Boolean @default(false)
}

enum MediaType {
   AUDIO
   IMAGE
}

model Media {
  id        Int      @id @default(autoincrement())
  path      String
  name      String
  type      MediaType
  cards     Card[]
  workspace Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId Int
}

model Card {
  id           Int           @id @default(autoincrement())
  faces        CardFace[]
  cardSetCards CardSetCard[]
  audio        Media?        @relation(fields: [audioId], references: [id])
  audioId      Int?
}

enum CardSide {
  FRONT
  BACK
}

model CardFace {
  id      Int      @id @default(autoincrement())
  content String   @db.Text
  card    Card     @relation(fields: [cardId], references: [id])
  cardId  Int
  side    CardSide
}

model CardSetUser {
  cardSet CardSet @relation(fields: [cardSetId], references: [id])
  cardSetId Int
  user    User     @relation(fields: [userId], references: [id])
  userId  Int
  role    UserRole

  @@id([cardSetId, userId])
}

model CardSet {
  id      Int      @id @default(autoincrement())
  name    String
  description String @default("")
  cards   CardSetCard[]
  users   CardSetUser[]
  workspace Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId Int
  order Int @default(0)
}

model CardSetCard {
  card Card @relation(fields: [cardId], references: [id])
  cardId Int
  cardSet CardSet @relation(fields: [cardSetId], references: [id])
  cardSetId Int
  order Int @default(0)
  @@id([cardId, cardSetId])
}